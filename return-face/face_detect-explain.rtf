{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl320

\f0\b\fs24 \cf0 \expnd0\expndtw0\kerning0
\ul \ulc0 \uc0\u1086 \u1073 \u1103 \u1089 \u1085 \u1077 \u1085 \u1080 \u1077  face_detect.py\
\pard\pardeftab720\sl320

\b0 \cf0 \expnd0\expndtw0\kerning0
\ulnone \
\pard\pardeftab720\sl320

\b \cf0 \expnd0\expndtw0\kerning0
# Get user supplied values
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
(1) imagePath = sys.argv[1]
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
(2) cascPath = sys.argv[2]
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl320

\b0 \cf0 \expnd0\expndtw0\kerning0
argv = argumentative value\
\uc0\u1079 \u1072  \u1076 \u1072  \u1082 \u1086 \u1084 \u1087 \u1080 \u1083 \u1080 \u1088 \u1072 \u1084 \u1077  \u1087 \u1088 \u1086 \u1075 \u1088 \u1072 \u1084 \u1072 , \u1087 \u1088 \u1080 \u1085 \u1094 \u1080 \u1087 \u1085 \u1086  \u1087 \u1080 \u1096 \u1077 \u1084 \'a0python face_detect.py, \u1085 \u1086 \
\uc0\u1074  \u1089 \u1083 \u1091 \u1095 \u1072 \u1103  \u1080 \u1089 \u1082 \u1072 \u1084 \u1077  \u1076 \u1072  \u1087 \u1086 \u1083 \u1091 \u1095 \u1080 \u1084  \u1080  (1) - \u1082 \u1086 \u1077  \u1080 \u1079 \u1086 \u1073 \u1088 \u1072 \u1078 \u1077 \u1085 \u1080 \u1077  \u1097 \u1077  \u1087 \u1086 \u1083 \u1079 \u1074 \u1072 \u1084 \u1077  \u1080  (2) - \u1082 \u1086 \u1081  cascade \u1079 \u1072  recognize-\u1074 \u1072 \u1085 \u1077  \u1085 \u1072  \u1083 \u1080 \u1094 \u1072  \u1097 \u1077  \u1080 \u1079 \u1087 \u1086 \u1083 \u1079 \u1074 \u1072 \u1084 \u1077 \
\uc0\u1074  \u1089 \u1083 \u1091 \u1095 \u1072 \u1103 , \u1097 \u1077  \u1080 \u1079 \u1087 \u1086 \u1083 \u1079 \u1074 \u1072 \u1084 \u1077  cascade-\u1072  \u1079 \u1072  \u1088 \u1072 \u1079 \u1087 \u1086 \u1079 \u1085 \u1072 \u1074 \u1072 \u1085 \u1077  \u1085 \u1072  \u1083 \u1080 \u1094 \u1072 , \u1076 \u1072 \u1076 \u1077 \u1085  \u1086 \u1090  OpenCV -\'a0haarcascade_frontalface_default.xml\
\
\pard\pardeftab720\sl320

\b \cf0 \expnd0\expndtw0\kerning0
# Create the haar cascade
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
faceCascade = cv2.CascadeClassifier(cascPath)
\b0 \expnd0\expndtw0\kerning0
\
\
\uc0\u1080 \u1079 \u1087 \u1086 \u1083 \u1079 \u1074 \u1072 \u1084 \u1077  OpenCV, \u1079 \u1072  \u1076 \u1072  \u1089 \u1080  \u1085 \u1072 \u1087 \u1088 \u1072 \u1074 \u1080 \u1084  \u1085 \u1086 \u1074  cascade calssifier, \u1080 \u1079 \u1087 \u1086 \u1083 \u1079 \u1074 \u1072 \u1097  \u1079 \u1072 \u1076 \u1072 \u1076 \u1077 \u1085 \u1080 \u1103  \u1074  \u1087 \u1088 \u1077 \u1076 \u1085 \u1072 \u1090 \u1072  \u1089 \u1090 \u1098 \u1087 \u1082 \u1072  \u1086 \u1090  \u1087 \u1088 \u1086 \u1084 \u1077 \u1085 \u1083 \u1080 \u1074 \u1072 \u1090 \u1072  cascPath\
\uc0\u1090 \u1086 \u1074 \u1072  \u1079 \u1072 \u1088 \u1077 \u1078 \u1076 \u1072  cascade-\u1072  \u1074  \u1087 \u1072 \u1084 \u1077 \u1090 \u1090 \u1072  \u1085 \u1072  \u1082 \u1086 \u1084 \u1087 \u1102 \u1090 \u1098 \u1088 \u1072 , \u1090 \u1072 \u1082 \u1072  \u1095 \u1077  \u1090 \u1103  \u1077  \u1075 \u1086 \u1090 \u1086 \u1074 \u1072  \u1079 \u1072  \u1080 \u1079 \u1087 \u1086 \u1083 \u1079 \u1074 \u1072 \u1085 \u1077 \
\uc0\u1085 \u1077  \u1079 \u1072 \u1073 \u1088 \u1072 \u1074 \u1103 \u1084 \u1077 , \u1095 \u1077  cascade-\u1072  \u1077  \u1087 \u1088 \u1086 \u1089 \u1090 \u1086  \u1077 \u1076 \u1080 \u1085  xml \u1092 \u1072 \u1081 \u1083 , \u1082 \u1086 \u1081 \u1090 \u1086  \u1089 \u1098 \u1076 \u1098 \u1088 \u1078 \u1072  \u1076 \u1072 \u1085 \u1085 \u1080 \u1090 \u1077  \u1079 \u1072  \u1088 \u1072 \u1079 \u1087 \u1086 \u1079 \u1085 \u1072 \u1074 \u1072 \u1085 \u1077  \u1085 \u1072  \u1083 \u1080 \u1094 \u1072 \
\
\

\b \expnd0\expndtw0\kerning0
# Detect faces in the image
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
faces = faceCascade.detectMultiScale(
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
\'a0 \'a0 gray,
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
\'a0 \'a0 scaleFactor=1.1,
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
\'a0 \'a0 minNeighbors=5,
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
\'a0 \'a0 minSize=(30, 30),
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
\'a0 \'a0 flags = cv2.cv.CV_HAAR_SCALE_IMAGE
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
)
\b0 \expnd0\expndtw0\kerning0
\
\
The detectMultiScale function is a general function that detects objects. Since we are calling it on the face cascade, that\'92s what it detects. The first option is the grayscale image.\
\
\uc0\u1079 \u1072  scaleFactor \u1074 \u1080 \u1078  scale factor, scale factor 2, image pyramid\
\
\uc0\u1079 \u1072  minNeighbors \u1074 \u1080 \u1078  {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/22249579/opencv-detectmultiscale-minneighbors-parameter"}}{\fldrslt \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 http://stackoverflow.com/questions/22249579/opencv-detectmultiscale-minneighbors-parameter}},\'a0parameter specifying how many neighbors each candidate rectangle should have to retain it\
\uc0\u1074 \u1089 \u1077  \u1077 \u1076 \u1085 \u1086  \u1082 \u1072 \u1090 \u1086  \u1080 \u1084 \u1072  \u1083 \u1080 \u1094 \u1077 , \u1090 \u1086  \u1075 \u1086  \u1088 \u1072 \u1079 \u1087 \u1086 \u1079 \u1085 \u1072 \u1074 \u1072  \u1084 \u1085 \u1086 \u1075 \u1086  \u1087 \u1098 \u1090 \u1080 , \u1080  \u1074 \u1089 \u1077  \u1077 \u1076 \u1085 \u1086  \u1079 \u1072  \u1077 \u1076 \u1085 \u1086  \u1083 \u1080 \u1094 \u1077  \u1097 \u1077  \u1080 \u1084 \u1072 \u1096  \u1084 \u1085 \u1086 \u1075 \u1086  \u1086 \u1090 \u1082 \u1088 \u1080 \u1090 \u1080  \u1083 \u1080 \u1094 \u1072  \u1074 \u1089 \u1077  \u1077 \u1076 \u1085 \u1086 , \u1079 \u1072 \u1090 \u1086 \u1074 \u1072  \u1089 \u1077  \u1085 \u1072 \u1089 \u1083 \u1072 \u1075 \u1074 \u1072 \u1090  \u1080  \u1089 \u1072  \u1089 \u1098 \u1089 \u1077 \u1076 \u1085 \u1080 , \u1079 \u1072 \u1097 \u1086 \u1090 \u1086  \u1086 \u1090 \u1075 \u1086 \u1074 \u1072 \u1088 \u1103 \u1090  \u1079 \u1072  \u1077 \u1076 \u1085 \u1086  \u1083 \u1080 \u1094 \u1077 , \u1080  \u1082 \u1086 \u1083 \u1082 \u1086 \u1090 \u1086  \u1087 \u1086 \u1074 \u1077 \u1095 \u1077  \u1080 \u1084 \u1072  \u1085 \u1072 \u1089 \u1083 \u1086 \u1078 \u1077 \u1085 \u1080 , \u1090 \u1086 \u1083 \u1082 \u1086 \u1074 \u1072  \u1087 \u1086 -\u1075 \u1086 \u1083 \u1103 \u1084 \u1072  \u1074 \u1077 \u1088 \u1086 \u1103 \u1090 \u1085 \u1086 \u1089 \u1090  \u1090 \u1086 \u1074 \u1072  \u1085 \u1072 \u1080 \u1089 \u1090 \u1080 \u1085 \u1072  \u1076 \u1072  \u1077  \u1083 \u1080 \u1094 \u1077  (\u1085 \u1072 \u1089 \u1083 \u1086 \u1078 \u1077 \u1085 \u1080  \u1077  \u1089 \u1080 \u1085 \u1086 \u1085 \u1080 \u1084  \u1085 \u1072  \u1089 \u1098 \u1089 \u1077 \u1076 \u1085 \u1080  \u1074  \u1089 \u1083 \u1091 \u1095 \u1072 \u1103 )\
\
\uc0\u1079 \u1072  minSize - minimum possible object size; objects smaller than that are ignored\
\
\uc0\u1079 \u1072  maxSize - maximum possible object size; objects bigger than this are ignored\
\
The detection algorithm uses a moving window to detect objects. minNeighbors defines how many objects are detected near the current one before it declares the face found. minSize, meanwhile, gives the size of each window. I took commonly used values for these fields. In real life, you would experiment with different values for the window size, scale factor, etc., until you find one that best works for you.\
\

\b \expnd0\expndtw0\kerning0
print "Found \{0\} faces!".format(len(faces))
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
\
# Draw a rectangle around the faces
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
for (x, y, w, h) in faces:
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
\'a0 \'a0 cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)
\b0 \expnd0\expndtw0\kerning0
\
\
This function returns 4 values: the x and y location of the rectangle, and the rectangle\'92s width and height (w , h).\
We use these values to draw a rectangle using the built-in rectangle() function.\
\
\

\b \expnd0\expndtw0\kerning0
cv2.imshow("Faces found" ,image)
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
cv2.waitKey(0)
\b0 \expnd0\expndtw0\kerning0
\

\b \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl320

\b0 \cf0 \expnd0\expndtw0\kerning0
In the end, we display the image, and wait for the user to press a key.\
}